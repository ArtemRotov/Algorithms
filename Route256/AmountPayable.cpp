/*
В магазине акция: «купи три одинаковых товара и заплати только за два». Конечно, каждый купленный товар
                  может участвовать лишь в одной акции. Акцию можно использовать многократно.

Например, если будут куплены 7 товаров одного вида по цене 2 за штуку и 5 товаров другого вида по цене
                  3 за штуку, то вместо 7?2+5?3 надо будет оплатить 5?2+4?3=22.

Считая, что одинаковые цены имеют только одинаковые товары, найдите сумму к оплате.


В первой строке записано целое число t (1?t?10^4) — количество наборов входных данных.

Далее записаны наборы входных данных. Каждый начинается строкой, которая содержит n (1?n?2?10^5) — количество
купленных товаров. Следующая строка содержит их цены p1,p2,…,pn (1?pi?10^4). Если цены двух товаров одинаковые,
то надо считать, что это один и тот товар.

Гарантируется, что сумма значений n по всем тестам не превосходит 2?105.


Входные данные
6
12
2 2 2 2 2 2 2 3 3 3 3 3
12
2 3 2 3 2 2 3 2 3 2 2 3
1
10000
9
1 2 3 1 2 3 1 2 3
6
10000 10000 10000 10000 10000 10000
6
300 100 200 300 200 300

Выходные данные
22
22
10000
12
40000
1100
*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

int main()
{
    int count = 0;
    std::vector<std::vector<int>> table {};

    std::cin >> count;

    for (int i = 0; i < count; ++i)
    {
        int cnt = 0;
        std::cin >> cnt;

        table.emplace_back();

        for (int j = 0; j < cnt; ++j)
        {
            int val = 0;
            std::cin >> val;
            table[i].push_back(val);
        }

    }

    for (std::vector<int> &vec : table)
    {
        std::sort(vec.begin(),vec.end());

        int size = vec.size() - 2;
        for (int i = 0; i < (int) vec.size() -2 ; ++i)
        {
            if (vec[i] == vec[i+2])
            {
                vec[i] = 0;
                i += 2;
            }
        }

        std::cout << std::accumulate(vec.begin(),vec.end(),0 ) << std::endl;
    }

    return 0;
}
